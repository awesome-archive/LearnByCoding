global {
	perm_cache=2048;   # 缓存文件大小，单位KB
	cache_dir="/var/cache/pdnsd";  # 缓存文件位置，保留默认
	run_as="nobody";          # runas，建议使用一个权限低的用户
	server_ip = 0.0.0.0;  # 监听所有
	server_port = 5301;  # pdnsd 监听端口,建议不使用53
	status_ctl = on;   # 保留on,pdnsd运行时通过pdnsd-ctl进行管理
	query_method=tcp_udp;  # 向上级DNS请求的方式只使用TCP
    tcp_server = on;  #是否打开TCP端口
	min_ttl=15m;       # 最小TTL缓存时间，建议设置在1m~15m（默认单位秒，m=分钟,d=天,w=周),自己酌情往上加，默认是15分钟
	max_ttl=1d;        # 最大TTL缓存时间，一般来讲不影响性能和表现
	timeout=10;        # 全局超时时间，建议时长大于upstream超时时长，如果使用tcp_udp建议大于upstream超时的两倍
	neg_domain_pol=on; # 官方文档建议开启
    neg_rrs_pol=on;
    randomize_recs = on;    #在返回多个ip的时候会随机重新排序缓存,默认开启
    #paranoid=on;  #通过只接受上游的authority结果来防止上游DNS污染,管用但是让pdnsd低效
    debug=off;  #调试模式，打开你会发现你的/var/log会以大概一小时1G的速度写入log文件。除非调试否则打开就是作死
    verbosity = 1;  #日志的详细程度，1感觉挺好
	udpbufsize=1024;   # New in version 1.2.9: This option sets the upper limit on the size of UDP DNS messages. The default is 1024.
}
 
# 这个是server区域，可以定义多组，定义pdnsd的上游dns,pdns按照顺序依次查询
server {
	label= "googleDNS";  # 为这组server起一个名字
	ip = 8.8.8.8,8.8.4.4;    # 填写DNS的IP地址，多个地址逗号分隔，可以换行，分号结尾
	port = 53;     # 填写DNS的端口
	timeout=5;         # 超时值，酌情修改
	uptest=query;       # 进行可用性检查，none=不检查，query代表发送DNS请求的方式
    query_test_name="."  #结合uptest使用,请求根域名解析来检查上游的可用性
	caching=on;
    purge_cache=off;   # 如果off，pdnsd不会主动清除缓存中过期的项目 除非缓存满了
    edns_query=on;    # 是否使用edns
    
}
